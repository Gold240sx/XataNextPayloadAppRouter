// Generated by Xata Codegen 0.29.4. Please do not edit.
import { buildClient } from "@xata.io/client"
import type {
	BaseClientOptions,
	SchemaInference,
	XataRecord,
} from "@xata.io/client"

const tables = [
	{
		name: "folders",
		columns: [
			{
				name: "name",
				type: "text",
				notNull: false,
				unique: true,
				defaultValue: null,
			},
			{
				name: "userId",
				type: "text",
				notNull: true,
				unique: false,
				defaultValue: "'null'::text",
			},
			{
				name: "xata_createdat",
				type: "datetime",
				notNull: true,
				unique: false,
				defaultValue: "now()",
			},
			{
				name: "xata_id",
				type: "text",
				notNull: true,
				unique: true,
				defaultValue: "('rec_'::text || (xata_private.xid())::text)",
			},
			{
				name: "xata_updatedat",
				type: "datetime",
				notNull: true,
				unique: false,
				defaultValue: "now()",
			},
			{
				name: "xata_version",
				type: "int",
				notNull: true,
				unique: false,
				defaultValue: "0",
			},
		],
	},
	{
		name: "payload_migrations",
		columns: [
			{
				name: "batch",
				type: "numeric",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: "created_at",
				type: "timestamp(3) with time zone",
				notNull: true,
				unique: false,
				defaultValue: "now()",
			},
			{
				name: "id",
				type: "int",
				notNull: true,
				unique: true,
				defaultValue:
					"nextval('bb_el00mkiitd25ve3enpo2ddv17k_ec029j.payload_migrations_id_seq'::regclass)",
			},
			{
				name: "name",
				type: "varchar",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: "updated_at",
				type: "timestamp(3) with time zone",
				notNull: true,
				unique: false,
				defaultValue: "now()",
			},
		],
	},
	{
		name: "payload_preferences",
		columns: [
			{
				name: "created_at",
				type: "timestamp(3) with time zone",
				notNull: true,
				unique: false,
				defaultValue: "now()",
			},
			{
				name: "id",
				type: "int",
				notNull: true,
				unique: true,
				defaultValue:
					"nextval('bb_el00mkiitd25ve3enpo2ddv17k_ec029j.payload_preferences_id_seq'::regclass)",
			},
			{
				name: "key",
				type: "varchar",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: "updated_at",
				type: "timestamp(3) with time zone",
				notNull: true,
				unique: false,
				defaultValue: "now()",
			},
			{
				name: "value",
				type: "json",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
		],
	},
	{
		name: "payload_preferences_rels",
		columns: [
			{
				name: "id",
				type: "int",
				notNull: true,
				unique: true,
				defaultValue:
					"nextval('bb_el00mkiitd25ve3enpo2ddv17k_ec029j.payload_preferences_rels_id_seq'::regclass)",
			},
			{
				name: "order",
				type: "int",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: "parent_id",
				type: "int",
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: "path",
				type: "varchar",
				notNull: true,
				unique: false,
				defaultValue: null,
			},
			{
				name: "users_id",
				type: "int",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
		],
	},
	{
		name: "users",
		columns: [
			{
				name: "created_at",
				type: "timestamp(3) with time zone",
				notNull: true,
				unique: false,
				defaultValue: "now()",
			},
			{
				name: "email",
				type: "varchar",
				notNull: true,
				unique: true,
				defaultValue: null,
			},
			{
				name: "hash",
				type: "varchar",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: "id",
				type: "int",
				notNull: true,
				unique: true,
				defaultValue:
					"nextval('bb_el00mkiitd25ve3enpo2ddv17k_ec029j.users_id_seq'::regclass)",
			},
			{
				name: "lock_until",
				type: "timestamp(3) with time zone",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: "login_attempts",
				type: "numeric",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: "reset_password_expiration",
				type: "timestamp(3) with time zone",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: "reset_password_token",
				type: "varchar",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: "salt",
				type: "varchar",
				notNull: false,
				unique: false,
				defaultValue: null,
			},
			{
				name: "updated_at",
				type: "timestamp(3) with time zone",
				notNull: true,
				unique: false,
				defaultValue: "now()",
			},
		],
	},
] as const

export type SchemaTables = typeof tables
export type InferredTypes = SchemaInference<SchemaTables>

export type Folders = InferredTypes["folders"]
export type FoldersRecord = Folders & XataRecord

export type PayloadMigrations = InferredTypes["payload_migrations"]
export type PayloadMigrationsRecord = PayloadMigrations & XataRecord

export type PayloadPreferences = InferredTypes["payload_preferences"]
export type PayloadPreferencesRecord = PayloadPreferences & XataRecord

export type PayloadPreferencesRels = InferredTypes["payload_preferences_rels"]
export type PayloadPreferencesRelsRecord = PayloadPreferencesRels & XataRecord

export type Users = InferredTypes["users"]
export type UsersRecord = Users & XataRecord

export type DatabaseSchema = {
	folders: FoldersRecord
	payload_migrations: PayloadMigrationsRecord
	payload_preferences: PayloadPreferencesRecord
	payload_preferences_rels: PayloadPreferencesRelsRecord
	users: UsersRecord
}

const DatabaseClient = buildClient()

const defaultOptions = {
	databaseURL:
		"https://Michael-Martell-s-workspace-ec029j.us-east-1.xata.sh/db/2024-portfolio",
}

export class XataClient extends DatabaseClient<DatabaseSchema> {
	constructor(options?: BaseClientOptions) {
		super({ ...defaultOptions, ...options }, tables)
	}
}

let instance: XataClient | undefined = undefined

export const getXataClient = () => {
	if (instance) return instance

	instance = new XataClient()
	return instance
}
